FROM {{env.from}}

ENV PHPIZE_DEPS \
		autoconf \
		dpkg-dev dpkg \
		file \
		g++ \
		gcc \
		libc-dev \
		make \
		pkgconf \
		re2c

ENV WORK_DIR /var/www/html
ENV PHP_INI_DIR /usr/local/etc/php

{{ # 创建配置文件目录；创建项目存放目录，并改变权限及所属 -}}
RUN set -eux; \
    {{ # 修改国内镜像源 -}}
    sed -i 's/dl-cdn.alpinelinux.org/mirrors.aliyun.com/g' /etc/apk/repositories; \
    apk update && apk upgrade; \
    apk add --no-cache curl; \
    \
    {{ # 添加用户组和用户 -}}
    adduser -u 82 -D -S -G www-data www-data; \
    \
    {{ # 创建配置文件目录 -}}
    mkdir -p "$PHP_INI_DIR/conf.d"; \
    \
    [ ! -d "$WORK_DIR" ]; \
    {{ # 创建项目运行目录 -}}
    mkdir -p "$WORK_DIR""; \
    chown www-data:www-data "$WORK_DIR"; \
    chmod 777 "$WORK_DIR"

ENV PHP_BUILD_DIR /usr/src/php
ENV PHP_VERSION {{.version}}
ENV PHP_URL="{{.url}}" PHP_ASC_URL="{{.ascUrl}}"
ENV PHP_SHA256="{{.sha256}}"
ENV GPG_KEYS {{.gpgKeys}}

{{ # 使用记忆功能，记忆功能以便去掉打包过程中才会使用的包，从而缩减最终容器尺寸
   # 记忆功能主要是指：alpine-linux 中的 apk --virtual 功能
   # 对于 apt 则有一个 apt-mark 工具 -}}
RUN set -eux; \
    {{ # 添加下载和验证功能程序 -}}
    apk add --no-cache --virtual .fetch-deps curl gnupg tar; \
    \
    cd /tmp; \
    {{ # 下载 php 压缩包 -}}
    curl -fsSL -o php.tar.xz "$PHP_URL"; \
    \
    {{ # 检查 PHP_SHA256 变量为非空字符串，且长度不为0 -}}
    if [ -n "$PHP_SHA256" ]; then \
        {{ # 使用 sha256 验证下载的 php 压缩包与给定的 PHP_SHA256 变量值是否一致 -}}
        echo "$PHP_SHA256 *php.tar.xz" | sha256sum -c;
    fi; \
    \
    if [ -n "$PHP_ASC_URL" ]; then \
        {{ # 下载 php 加密验证压缩包 -}}
        curl -fsSL -o php.tar.xz.asc "$PHP_ASC_URL";\
        \
        {{ # 创建临时文件夹并设置环境变量 GNUPGHOME -}}
        export GNUPGHOME="$(mktemp -d)"; \
        \
        {{ # 验证 php 压缩包签名 -}}
        for key in $GPG_KEYS; do \
            gpg --batch --keyserver keyserver.ubuntu.com --recv-keys "$key"; \
        done; \
        gpg --batch --verify php.tar.xz.asc php.tar.xz; \
        \
        gpgconf --kill all; \
        rm -rf "$GNUPGHOME"; \
    fi; \
    \
    {{ # 解压 php 压缩包 -}}
    mkdir -p "$PHP_BUILD_DIR"; \
    {{ # -J: 通过 xz 过滤存档
       # -x: 从归档文件中提取文件，可以搭配-C（大写）在特定目录解开
       # -f: 指定文件
       # --strip-components=N: 去掉第 N-1 层目录结构 -}}
    tar -Jxf /tmp/php.tar.xz -C "$PHP_BUILD_DIR" --strip-components=1; \
    \
    {{ # 删除记忆功能 -}}
    apk del --no-network .fetch-deps

ENV PHP_DIR /usr/php
ENV PHP_CONF_DIR /etc/php

{{ # 使用记忆功能，添加安装临时环境，并安装编译所需库；编译php源码并安装 -}}
RUN set -eux; \
    {{ # 直接从 Git 源文件或者自己修改过的包编译时可能需要：
       # autoconf: 2.59+ (for PHP >= 7.0.0), 2.64+ (for PHP >= 7.2.0)
       # automake: 1.4+
       # libtool: 1.4.x+（除了 1.4.2）
       # re2c: 版本 0.13.4+
       # bison:
       #        PHP 7.0 - 7.3: 2.4 或更高 (包含 Bison 3.x)
       #        PHP 7.4: > 3.0
       # 密码散列算法为了支持 Argon2 密码哈希，需要 libargon2。 PHP 7.3.0 起，需要 libargon2 为 20161029 或更高的版本
       # sodium 扩展需要 libsodium ≥ 1.0.8 -}}
    apk add --no-cache --virtual .build-deps; \

    cd "$PHP_BUILD_DIR"; \
    \
    {{ # 在 debian/rules 中的使用 dpkg-architecture 设置的环境变量作为 make 变量传递给 debian/rules（参见 make 文档）
       # 应该始终使用初始化它们带有 -q 选项的 dpkg-architecture
       # --query: 打印单个变量的值
       # DEB_BUILD_GNU_TYPE: 构建机器的 GNU 系统类型
       # GNU 系统类型由两部分组成的架构规范字符串用连字符隔开：cpu 和 system。例子：
             i586-linux-gnu、sparc-linux-gnu、i686-gnu、x86_64-netbsd。 -}}
    gnuArch="$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)"; \
    \
    {{ # 检测安装平台的目标特征，比如它会检测你是不是有CC或GCC，并不是需要CC或GCC，它是个shell脚本 -}}
    ./configure \
            {{ # 在对源码进行交叉编译的时候，关键的一步是设置configure的参数，其中有三个参数-build、-host、-target的区别如下
               # build: 执行代码编译的主机，正常的话就是你的主机系统。这个参数一般由config.guess来猜就可以。当然自己指定也可以
               # host: 编译出来的二进制程序所执行的主机，因为绝大多数是本机编译，本机执行，所以这个值就等于build。只有交叉编译的时候（也就是本机编译，其他系统机器执行）才会build和host不同。用host指定运行主机
               # target: 这个选项只有在建立交叉编译环境的时候用到，正常编译和交叉编译都不会用到。他用build主机上的编译器，编译一个新的编译器（binutils, gcc,gdb等），这个新的编译器将来编译出来的其他程序将运行在target指定的系统上
               # 只有 host!=build 的时候编译才是交叉编译。否则就是正常编译 -}}
            --build="$gnuArch" \
            \
            {{ # 安装设置 -}}
            {{ # 指定 php 安装目录 ，后面的配置也会以此为相对目录 -}}
            --prefix="$PHP_DIR" \
            \
            {{ # 可选功能 -}}
            {{ # 忽略无法识别的 --enable/--with 选项 -}}
            --disable-option-checking \
            \
            {{ # 针对服务器的扩展 -}}
            {{ # FPM (FastCGI 进程管理器) 是一个可选的 PHP FastCGI 实现并且附加了一些（主要是）对高负载网站很有用的特性 -}}
            --enable-fpm \
            {{ # 设置 FPM 运行的用户身份（默认 - nobody） -}}
            --with-fpm-user=www-data \
            {{ # 设置 FPM 运行时的用户组（默认 - nobody） -}}
            --with-fpm-group=www-data \
            {{ # 禁止编译 PHP 的 CGI 版本 -}}
            --disable-cgi \
            \
            {{ # 通用设置 -}}
            {{ # 设置 php.ini 的搜索路径。默认为 PREFIX/lib。 -}}
            --with-config-file-path="$PHP_INI_DIR" \
            {{ # 禁用短形式的开始标签 <? -}}
            --disable-short-tags \
            \
            {{ # 扩展配置项 -}}
            {{ # 数学扩展 -}}
            {{ # BCMath 任意精度数学 -}}
            --enable-bcmath \
            {{ # 加密扩展 -}}
            {{ # OpenSSL 扩展 -}}
            --with-openssl \
            {{ # 密码散列算法，为了使用 Argon2 密码哈希 -}}
            --with-password-argon2 \
            {{ # Mhash 可用于创建校验和、消息摘要、消息验证码等 -}}
            --with-mhash \
            {{ # Sodium 是一个现代的、易于使用的软件库，用于加密、解密、签名、密码哈希等 -}}
            --with-sodium=shared \
            {{ # 国际化与字符编码支持 -}}
            {{ # 多字节，字符串的支持 -}}
            --enable-mbstring \
            {{ # 图像生成和处理 -}}
            {{ # Exif，从数码相机拍摄的图片文件中读取元数据 -}}
            --enable-exif \
            {{ # 其他服务 -}}
            {{ # cURL -}}
            --with-curl \
    ; \
    {{ # 编译，它从Makefile中读取指令，然后编译 -}}
    {{ # -j:指定同时执行的命令数目 -}}
    {{ # nproc: 命令的作用是可以显示当前进程可用的CPU数目 -}}
    make -j "$(nproc)";\
    {{ # 安装，它也从Makefile中读取指令，安装到指定的位置 -}}
    make install; \
    make clean; \
    \
    cp php-ini.* "$PHP_CONF_DIR" \
    \
    apk del --no-network .build-deps

WORKDIR /var/www/html

EXPOSE 9000

# 以下内容仅在测试文档生成容器期间使用
RUN touch /tmp/demo.log; \
    && echo "test" >> /tmp/demo.log;
CMD ["tail", "-f", "/tmp/demo.log"]
# 以上内容在文档测试无误后删除，并启用下面 CMD 命令
#CMD ["php-fpm"]